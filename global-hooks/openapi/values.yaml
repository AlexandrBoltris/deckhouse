x-extend:
  schema: config-values.yaml
type: object
default: {}
additionalProperties: false
properties:
  internal:
    additionalProperties: false
    type: object
    default: {}
    properties:
      modules:
        default: { }
        additionalProperties: false
        type: object
        properties:
          resourcesRequests:
            type: object
            default: {}
            additionalProperties: false
            properties:
              milliCpuEveryNode:
                type: number
                format: double
                minimum: 0
              memoryEveryNode:
                type: integer
                format: int64
                minimum: 0
              milliCpuControlPlane:
                type: integer
                format: int64
                minimum: 0
              memoryControlPlane:
                type: integer
                format: int64
                minimum: 0
              milliCpuMaster:
                type: integer
                format: int64
                minimum: 0
              memoryMaster:
                type: integer
                format: int64
                minimum: 0
  clusterConfiguration:
    $ref: '/deckhouse/candi/openapi/cluster_configuration.yaml#/apiVersions/0/openAPISpec'
  clusterIsBootstrapped:
    type: boolean
    description: |
      It indicates the cluster is bootstraped.
      The cluster is considered bootstrapped if configmap d8-system/d8-cluster-is-bootstraped exists or
      cluster has at least one non-master node
  deckhouseVersion:
    type: string
  deckhouseEdition:
    type: string
    enum: [Unknown, CE, FE, EE ]
  enabledModules:
    type: array
    items:
      type: string
  discovery:
    additionalProperties: true
    type: object
    default: {}
    properties:
      clusterControlPlaneIsHighlyAvailable:
        type: boolean
        default: false
      clusterMasterCount:
        type: integer
        minimum: 0
      podSubnet:
        type: string
        pattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
        description: |
          Network subnet for pods
      serviceSubnet:
        type: string
        pattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
        description: |
          Network subnet for k8s services
      defaultStorageClass:
        type: string
        # it is name of resource in kubernetes
        pattern: '[a-z0-9]([\-a-z0-9\.]*[a-z0-9])?'
        description: |
          Default storage class for cluster
          It gets form storage class annotated as "storageclass.beta.kubernetes.io/is-default-class" or "storageclass.kubernetes.io/is-default-class"
      clusterDNSAddress:
        type: string
        pattern: '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})$'
        description: |
          DNS server in-cluster address
          It gets form service in kube-system namespace labeled as "kube-dns" or "coredns"
      kubernetesCA:
        type: string
        description: |
          Kubernetes apiserver CA certificate.
          It gets from /var/run/secrets/kubernetes.io/serviceaccount/ca.crt file
      prometheusScrapeInterval:
        type: integer
        default: 30
        minimum: 1
        description: |
          Scrape interval for prometheus. In seconds
      clusterUUID:
        type: string
        description: |
          Unique cluster identifier
      clusterDomain:
        type: string
        pattern: '^[0-9a-zA-Z._-]+$'
      d8SpecificNodeCountByRole:
        # it is map node_role => count
        # we can have multiple roles, for example every module has our own role
        additionalProperties: true
        type: object
        default: {}
        description: |
          Map node-role => count.
          Node will have role 'some-role' if it has label with prefix node-role.deckhouse.io/
          Do not use label with prefix node-role.deckhouse.io/ on workers nodes!
      kubernetesVersions:
        type: array
        items:
          type: string
          # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          pattern: ^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
        description: |
          K8s versions for each control-plane node
      kubernetesVersion:
        type: string
        # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
        pattern: ^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
        description: |
          Effective (minimal from each control plane node) k8s version
      extensionAPIServerAuthenticationRequestheaderClientCA:
        type: string
        description: |
          The CA for verification requests to our custom modules from clients inside cluster.
          It gets from kube-system/extension-apiserver-authentication config map
  modulesImages:
    additionalProperties: true
    type: object
    default: {}
    properties:
      registryPath:
        type: string
        description: |
          Path part of deckhuse repo
      registryAddress:
        type: string
        description: |
          Domain part of deckhuse repo
      registryCA:
        type: string
        description: |
          Registry CA certificate
      registryScheme:
        type: string
        enum: ["http", "https"]
        description: |
          Scheme for registry
      registryDockercfg:
        type: string
        # source https://regex101.com/r/Pj4Ako/1
        pattern: ^(?:([a-z0-9A-Z+\/]){4})*([a-z0-9A-Z+\/])(?:([a-z0-9A-Z+\/])==|([a-z0-9A-Z+\/]){2}=|([a-z0-9A-Z+\/]){3})$
        description: |
          Docker config for registry from secret from d8-system/deckhouse-registry
      registry:
        type: string
        # source https://regex101.com/r/7oJe0k/1
        # based on https://regex101.com/library/a98UqN
        pattern: ^([\w.\-_]+((:\d+|)(/[a-z0-9._-]+/[a-z0-9._-]+))|)(/|)([a-z0-9.\-_]+(/[a-z0-9.\-_]+|))
        description: |
          Deckhouse images repo.
          It uses in helm teplates for generating container image address.
          Almost always, concatinateds with tag from modulesImages.tag
      tags:
        type: object
        default: {}
        # tags map module_name => map<image_name, tag>
        additionalProperties: true
        description: |
          Map module_name => map(image_name => tag)
          The map loads from /deckhouse/modules/images_tags.json file.
          That file generated on build stage.
          See modules_images_werf and modules_images_werf.yaml for additional information.
          Values from this map uses in helm teplates for generating container image address in deployments sts...
x-examples:
- storageClass: "storage-class"
  highAvailability: true
  modules:
    ingressClass: "my-ingress"
    publicDomainTemplate: "%s.example.com"
    placement:
      customTolerationKeys:
        - dedicated.example.com
        - node-dedicated.example.com/master
    https:
      certManager:
        clusterIssuerName: letsencrypt
      mode: CertManager
    resourcesRequests:
      everyNode:
        cpu: "100m"
        memory: "1G"
      masterNode:
        cpu: "1"
        memory: "1Gi"
  internal:
    modules:
      resourcesRequests:
        milliCpuControlPlane: 1024
        memoryControlPlane: 536870912
  clusterConfiguration:
    apiVersion: deckhouse.io/v1
    kind: ClusterConfiguration
    podSubnetNodeCIDRPrefix: "24"
    podSubnetCIDR: 10.244.0.0/16
    serviceSubnetCIDR: 192.168.0.0/16
    kubernetesVersion: "1.19"
    clusterDomain: test
    clusterType: "Cloud"
    cloud:
      prefix: test
      provider: OpenStack
    packagesProxy:
      uri: https://example.com
      username: user
      password: passwd
  clusterIsBootstrapped: true
  deckhouseVersion: dev
  deckhouseEdition: FE
  enabledModules: ["cert-manager", "vertical-pod-autoscaler-crd", "prometheus", "priority-class"]
  discovery:
    clusterControlPlaneIsHighlyAvailable: true
    clusterMasterCount: 3
    podSubnet: "10.10.10.10/24"
    serviceSubnet: "10.20.10.10/24"
    defaultStorageClass: "some-storage-class"
    clusterDNSAddress: "10.10.20.10"
    kubernetesCA: |
      K8S
      CA
      Multilne
    prometheusScrapeInterval: 30
    clusterUUID: deadbeef-4bda-11ec-81d3-0242ac130003
    clusterDomain: cluster.local
    d8SpecificNodeCountByRole:
      system: 2
    kubernetesVersions: [ "1.21.2", "1.21.3", "1.21.2" ]
    kubernetesVersion: "1.21.2"
    extensionAPIServerAuthenticationRequestheaderClientCA: |
      Extention Api server
      CA
      Multiline
  modulesImages:
    registry: registry.deckhouse.io/deckhouse/fe
    registryDockercfg: Y2ZnCg==
    registryAddress: registry.deckhouse.io
    registryPath: /deckhouse/fe
    registryScheme: https
    registryCA: testCA
    tags:
      module:
        image: hash
- storageClass: "storage-class"
  highAvailability: true
  modules:
    ingressClass: "my-ingress"
    publicDomainTemplate: "%s.example.com"
    placement:
      customTolerationKeys:
        - dedicated.example.com
        - node-dedicated.example.com/master
    https:
      mode: CustomCertificate
      customCertificate:
        secretName: plainstring
    resourcesRequests:
      everyNode:
        cpu: "100m"
        memory: "1G"
      masterNode:
        cpu: "1"
        memory: "1Gi"
  internal:
    modules:
      resourcesRequests:
        milliCpuControlPlane: 1024
        memoryControlPlane: 536870912
  clusterConfiguration:
    apiVersion: deckhouse.io/v1
    kind: ClusterConfiguration
    podSubnetNodeCIDRPrefix: "24"
    podSubnetCIDR: 10.244.0.0/16
    serviceSubnetCIDR: 192.168.0.0/16
    kubernetesVersion: "1.19"
    clusterDomain: test
    clusterType: "Cloud"
    cloud:
      prefix: test
      provider: OpenStack
    packagesProxy:
      uri: https://example.com
      username: user
      password: passwd
  clusterIsBootstrapped: true
  deckhouseVersion: dev
  deckhouseEdition: FE
  enabledModules: ["cert-manager", "vertical-pod-autoscaler-crd", "prometheus", "priority-class"]
  discovery:
    clusterControlPlaneIsHighlyAvailable: true
    clusterMasterCount: 3
    podSubnet: "10.10.10.10/24"
    serviceSubnet: "10.20.10.10/24"
    defaultStorageClass: "some-storage-class"
    clusterDNSAddress: "10.10.20.10"
    kubernetesCA: |
      K8S
      CA
      Multilne
    prometheusScrapeInterval: 30
    clusterUUID: deadbeef-4bda-11ec-81d3-0242ac130003
    clusterDomain: cluster.local
    d8SpecificNodeCountByRole:
      system: 2
    kubernetesVersions: [ "1.21.2", "1.21.3", "1.21.2" ]
    kubernetesVersion: "1.21.2"
    extensionAPIServerAuthenticationRequestheaderClientCA: |
      Extention Api server
      CA
      Multiline
  modulesImages:
    registry: registry.deckhouse.io/deckhouse/fe
    registryDockercfg: Y2ZnCg==
    registryAddress: registry.deckhouse.io
    registryPath: /deckhouse/fe
    registryScheme: https
    registryCA: testCA
    tags:
      module:
        image: hash
